@page "/add-rental"

<h2 class="form-title">Add Rental</h2>

<div class="form-wrapper">
    <div class="form-left">
        <div class="input-row">
            <label>New Generated ID:</label>
            <input type="text" @bind="RentalIDText" disabled />
        </div>

        <label>Enter Any of the Following:</label>

        <!-- Equipment ID with search -->
        <div class="input-row">
            <label>Search Equipment:</label>
            <input type="text"
                   list="equipmentList"
                   @bind-value="EquipmentSearchKeyword"
                   @bind-value:event="oninput"
                   @onblur="UpdateSelectedEquipment" />
            <datalist id="equipmentList">
                @foreach (var equipment in EquipmentManager.Equipments)
                {
                    <option value="@equipment.EquipmentName">@($"{equipment.EquipmentID} - {equipment.EquipmentName}")</option>
                }
            </datalist>
        </div>

        <div class="input-row">
            <label>Equipment ID:</label>
            <input type="text" @bind="EquipmentIDText" disabled />
        </div>

        <!-- Customer ID with search -->
        <div class="input-row">
            <label>Search Customer:</label>
            <input type="text"
                   list="customerList"
                   @bind-value="CustomerSearchKeyword"
                   @bind-value:event="oninput"
                   @onblur="UpdateSelectedCustomer" />
            <datalist id="customerList">
                @foreach (var customer in CustomerManager.Customers)
                {
                    <option value="@customer.Name">@($"{customer.CustomerID} - {customer.Name}")</option>
                }
            </datalist>
        </div>

        <div class="input-row">
            <label>Customer ID:</label>
            <input type="text" @bind="CustomerIDText" disabled />
        </div>




        <div class="input-row">
            <label>Rental Date:</label>
            <input type="date" @bind="RentalDate" />
        </div>

        <div class="input-row">
            <label>Return Date:</label>
            <input type="date" @bind="ReturnDate" />
        </div>

        <div class="input-row">
            <label>Cost of Rental:</label>
            <input type="number" step="5" @bind="CostOfRental" />
        </div>

       <div class="input-row">
            <label>Status:</label>
            <input type="text" @bind="Status" disabled />
        </div>



    </div>

    <div class="form-right">
        <label>Notes:</label>
        <textarea @bind="Notes" class="notes-box">
System will automatically modify the following information based on the updated status (Rented / Returned):
- Condition: Used
- Location: In Use / Storage

Add more notes if needed:
        </textarea>
    </div>
</div>

<div class="form-buttons">
    <button class="button" @onclick="SubmitRental">Add</button>
    <button class="button" @onclick="GoBack">Back To Home</button>
</div>

@if (showSuccess)
{
        <p class="text-success">✅ Rental added!</p>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private string RentalIDText;
    private int EquipmentID;
    private int CustomerID;
    private DateTime RentalDate = DateTime.Today;
    private DateTime ReturnDate = DateTime.Today;
    private decimal CostOfRental;
    private string Status = "Rented";
    private string Notes = string.Empty;
    private bool showSuccess = false;

    private string EquipmentSearchKeyword = string.Empty;
    private string EquipmentIDText = string.Empty;
    private string CustomerSearchKeyword = string.Empty;
    private string CustomerIDText = string.Empty;
    private string errorMessage = string.Empty;



    [Inject] private NavigationManager NavigationManager { get; set; }

    private void UpdateSelectedEquipment()
    {
        var match = EquipmentManager.Equipments.FirstOrDefault(eq =>
            eq.EquipmentName.Equals(EquipmentSearchKeyword, StringComparison.OrdinalIgnoreCase));

        if (match != null)
        {
            EquipmentID = match.EquipmentID;
            EquipmentIDText = EquipmentID.ToString();
        }
        else
        {
            EquipmentID = 0;
            EquipmentIDText = string.Empty;
        }
    }

    private void UpdateSelectedCustomer()
    {
        var match = CustomerManager.Customers.FirstOrDefault(c =>
        c.Name.Equals(CustomerSearchKeyword, StringComparison.OrdinalIgnoreCase));

        if (match != null)
        {
            CustomerID = match.CustomerID;
            CustomerIDText = CustomerID.ToString();
        }
        else
        {
            CustomerID = 0;
            CustomerIDText = string.Empty;
        }
    }

    protected override void OnInitialized()
    {
        GenerateRandomRentalID();
    }



    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private void SubmitRental()
    {

        var existingRental = cpsy200.Data.RentalManager.GetRentals()
            .FirstOrDefault(r => r.EquipmentID == EquipmentID && r.Status == "Rented");
      
        if (existingRental != null)
        {
            var matchedEquipment = EquipmentManager.Equipments.FirstOrDefault(e => e.EquipmentID == EquipmentID);
            string equipmentName = matchedEquipment?.EquipmentName ?? "Unknown";

            errorMessage = $"⚠️ Equipment '{equipmentName}' (ID: {EquipmentID}) is already rented (Rental ID: {existingRental.RentalID}) and must be returned before renting again.";
            showSuccess = false;
            return;
        }

        else
        {
            errorMessage = string.Empty;
        }

        var rental = new cpsy200.Data.Rental
            {
                RentalID = int.Parse(RentalIDText),
                EquipmentID = EquipmentID,
                CustomerID = CustomerID,
                RentalDate = RentalDate,
                ReturnDate = ReturnDate,
                CostOfRental = CostOfRental,
                TotalCost = CostOfRental,
                Status = Status,
                Notes = Notes
            };

        // Save rental
        cpsy200.Data.RentalManager.AddRental(rental);

        // Update Equipment Info and Save Equipment CSV
        var equipment = EquipmentManager.Equipments.FirstOrDefault(eq => eq.EquipmentID == EquipmentID);
        if (equipment != null)
        {
            if (Status == "Rented")
            {
                equipment.Condition = "Used";
                equipment.Location = "Rented Out";
                equipment.Status = "Rented";
            }
            else if (Status == "Returned")
            {
                equipment.Status = "Available";
                equipment.Location = "Storage";
            }

            EquipmentManager.SaveEquipments();
        }

        showSuccess = true;

        // Clear form
        GenerateRandomRentalID();
        EquipmentID = 0;
        EquipmentIDText = string.Empty;
        EquipmentSearchKeyword = string.Empty;

        CustomerID = 0;
        CustomerIDText = string.Empty;
        CustomerSearchKeyword = string.Empty;

        RentalDate = DateTime.Today;
        ReturnDate = DateTime.Today;
        CostOfRental = 0;
        Status = "Rented";
        Notes = string.Empty;
    }

    private void GenerateRandomRentalID()
    {
        var existingIDs = cpsy200.Data.RentalManager.GetRentals().Select(r => r.RentalID).ToHashSet();
        var random = new Random();
        int newID;

        do
        {
            newID = random.Next(1000, 9999); // 4-digit ID
        } while (existingIDs.Contains(newID)); // Ensure it's unique

        RentalIDText = newID.ToString();
    }
}